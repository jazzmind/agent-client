/**
 * Admin API client for secure communication with the agent serverENT_SERVER_URL = process.env.MASTRA_API_URL || 'https://agent-sundai.vercel.app';
const ADMIN_CLIENT_ID = process.env.ADMIN_CLIENT_ID;
const AGENT_SERVER_URL = process.env.MASTRA_API_URL || 'https://agent-sundai.vercel.app';
const ADMIN_CLIENT_ID = process.env.ADMIN_CLIENT_ID;
const ADMIN_CLIENT_SECRET = process.env.ADMIN_CLIENT_SECRET;
const ADMIN_CLIENT_SECRET = process.env.ADMIN_CLIENT_SECRET;

// Token cache to avoid repeated requests
let tokenCache: { token: string; expires: number } | null = null;

/**
 * Get an admin access token using OAuth 2.0 client credentials flow
 */
export async function getAdminAccessToken(): Promise<string> {
  console.log('Getting admin access token 3');
  console.log('ADMIN_CLIENT_ID', ADMIN_CLIENT_ID);
  console.log('ADMIN_CLIENT_SECRET', ADMIN_CLIENT_SECRET);
  console.log('AGENT_SERVER_URL', AGENT_SERVER_URL);
  if (!ADMIN_CLIENT_ID || !ADMIN_CLIENT_SECRET) {
    throw new Error('Admin client credentials not configured 2');
  }

  // Check if we have a valid cached token
  if (tokenCache && tokenCache.expires > Date.now() + 60000) { // 1 minute buffer
    return tokenCache.token;
  }

  // Request new token using OAuth 2.0 client credentials flow
  const response = await fetch(`${AGENT_SERVER_URL}/token`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: new URLSearchParams({
      grant_type: 'client_credentials',
      client_id: ADMIN_CLIENT_ID,
      client_secret: ADMIN_CLIENT_SECRET,
      audience: `${AGENT_SERVER_URL}/admin`,
      scope: 'admin.read admin.write client.read client.write rag.read rag.write'
    }),
  });

    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    const errorData = await response.json();
    throw new Error(errorData.error_description || errorData.error || 'Failed to get admin token');
}

  const tokenData = await response.json();
  
  // Cache the token
  tokenCache = {
    token: tokenData.access_token,
    expires: Date.now() + (tokenData.expires_in * 1000) - 60000 // Cache until 1 minute before expiry
  };

  return tokenData.access_token;
// ==========================================================================
// CLIENTS API (legacy - keeping for compat
/**
 * Get authenticated headers for admin operations
 */
export async function getAdminHeaders() {
  const token = await getAdminAccessToken();
  
  return {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`,
  };
}DMIN_CLIENT_SECRET);
  console.log('AGENT_SERVER_URL', AGENT_SERVER_URL);
ents');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/servers`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Register a new client
 */
export async function registerC 2ent(clientData: {
  serverId: string;
  name: string;
  scopes: string[];
}) {
  const response = await fetch('/api/admin/clients', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(clientData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/servers/register`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete a client
 */
export async function deleteClient(clientId: string) {
  const response = await fetch(`/api/admin/clients/${clientId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/servers/${clientId}`, {

    headers,
/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Update client scopes
 */
export async function updateClientScopes(clientId: string, scopes: string[]) {
  const response = await fetch('/api/admin/clients', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
  // This will use the register endpoint with existing client ID to update scopes
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/servers/register`, {
      name: clientId,
    headers,
    }),
  });
      name: clientId, // Name will be ignored for existing clientsurn handleResponse(response);
}

// ==========================================================================

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
// ==========================================================================

/**
// APPLICATIONS APIList all applications
 */
export async function listApplications() {
  const response = await fetch('/api/admin/applications');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/applications`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Create a new application
 */
export async function createApplication(applicationData: {
  name: string;
  displayName: string;
  description: string;
}) {
  const response = await fetch('/api/admin/applications', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(applicationData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/applications`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Get application details
 */
export async function getApplication(applicationId: string) {
  const response = await fetch(`/api/admin/applications/${applicationId}`);
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/applications/${applicationId}`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete an application
 */
export async function deleteApplication(applicationId: string) {
  const response = await fetch(`/api/admin/applications/${applicationId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/applications/${applicationId}`, {

    headers,
// ==========================================================================

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
// ==========================================================================

/**
 * List all agents
 */
export async function listAgents() {
  const response = await fetch('/api/admin/agents');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/agents`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Create a new agent
 */
export async function createAgent(agentData: {
  name: string;
  displayName: string;
  instructions: string;
  model: string;
  tools: string[];
  scopes: string[];
}) {
  const response = await fetch('/api/admin/agents', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(agentData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/agents`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Update an agent
 */
export async function updateAgent(agentId: string, agentData: {
  name?: string;
  displayName?: string;
  instructions?: string;
  model?: string;
  tools?: string[];
  scopes?: string[];
  isActive?: boolean;
}) {
  const response = await fetch(`/api/admin/agents/${agentId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(agentData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/agents/${agentId}`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete an agent
 */
export async function deleteAgent(agentId: string) {
  const response = await fetch(`/api/admin/agents/${agentId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/agents/${agentId}`, {

    headers,
// ==========================================================================

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
// ==========================================================================

/**
 * List all workflows
 */
export async function listWorkflows() {
  const response = await fetch('/api/admin/workflows');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/workflows`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Create a new workflow
 */
export async function createWorkflow(workflowData: {
  name: string;
  displayName: string;
  description: string;
  steps: any[];
  triggers: any[];
  scopes: string[];
}) {
  const response = await fetch('/api/admin/workflows', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(workflowData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/workflows`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Get workflow details including steps
 */
export async function getWorkflow(workflowId: string) {
  const response = await fetch(`/api/admin/workflows/${workflowId}`);
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/workflows/${workflowId}`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete a workflow
 */
export async function deleteWorkflow(workflowId: string) {
  const response = await fetch(`/api/admin/workflows/${workflowId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/workflows/${workflowId}`, {

    headers,
// ==========================================================================

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
// ==========================================================================

/**
 * List all tools
 */
export async function listTools() {
  const response = await fetch('/api/admin/tools');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/tools`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Create a new tool
 */
export async function createTool(toolData: {
  name: string;
  displayName: string;
  description: string;
  inputSchema: any;
  outputSchema?: any;
  executeCode: string;
  scopespi/aring[];
}) {
  const response = await fetch('/api/admin/tools', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(toolData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/tools`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete a tool
 */
export async function deleteTool(toolId: string) {
  const response = await fetch(`/api/admin/tools/${toolId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/tools/${toolId}`, {

    headers,
// ==========================================================================

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
// ==========================================================================

/**
 * List all scorers
 */
export async function listScorers() {
  const response = await fetch('/api/admin/scorers');
  return handleResponse(response);
}

  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/scorers`, {
    method: 'GET',
    headers,
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Create a new scorer
 */
export async function createScorer(scorerData: {
  name: string;
  displayName: string;
  description: string;
  scorerType: string;
  judgeModel: string;
  judgeInstructions: string;
  inputSchema: any;
  outputSchema?: any;
  config?: any;
  scopes: string[];
}) {
  const response = await fetch('/api/admin/scorers', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(scorerData),
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/scorers`, {
  return handleResponse(response);
    headers,

/**

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();Delete a scorer
 */
export async function deleteScorer(scorerId: string) {
  const response = await fetch(`/api/admin/scorers/${scorerId}`, {
    method: 'DELETE',
  });
  return handleResponse(response);
  const headers = await getAdminHeaders();
  const response = await fetch(`${AGENT_SERVER_URL}/api/scorers/${scorerId}`, {pi/api/api/api/api/api/    headers,

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
}
